// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int            @id @default(autoincrement())
  roleId              Int            @map("role_id")
  email               String         @unique
  password            String
  isVerified          Boolean        @default(false) @map("is_verified")
  resetVerified       Boolean        @default(false)
  resetVerifiedExpiry DateTime?
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @default(now()) @map("updated_at")
  role                Role           @relation(fields: [roleId], references: [id])
  orders              Order[]
  notifications       Notification[]
  profile             UserProfile?

  @@map("users")
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]

  @@map("roles")
}

model UserProfile {
  id             Int       @id @default(autoincrement())
  firstName      String    @map("first_name")
  lastName       String    @map("last_name")
  bio            String?
  profilePicture String?   @map("profile_picture")
  dateOfBirth    DateTime? @map("date_of_birth")
  gender         String?
  address        String?
  userId         Int       @unique
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime  @default(now()) @map("created_at")
  updatedAt      DateTime  @default(now()) @map("updated_at")

  @@map("user_profiles")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  slug     String    @unique
  products Product[]

  @@map("categories")
}

model Product {
  id            Int       @id @default(autoincrement())
  name          String
  description   String?
  price         Decimal   @db.Decimal(10, 2)
  stockQuantity Int       @default(0) @map("stock_quantity")
  categoryId    Int?      @map("category_id")
  sku           String?   @unique
  isActive      Boolean   @default(true) @map("is_active")
  createdAt     DateTime  @default(now()) @map("created_at")
  updatedAt     DateTime  @default(now()) @map("updated_at")
  category      Category? @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductImage {
  id        Int     @id @default(autoincrement())
  productId Int     @map("product_id")
  url       String  @db.VarChar(255)
  isPrimary Boolean @default(false) @map("is_primary")
  altText   String?

  @@map("product_images")
}

model Order {
  id              Int         @id @default(autoincrement())
  userId          Int         @map("user_id")
  status          String      @default("pending")
  totalAmount     Decimal     @map("total_amount") @db.Decimal(10, 2)
  paymentIntentId String?     @map("payment_intent_id")
  shippingAddress String      @map("shipping_address") @db.VarChar(255)
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @default(now()) @map("updated_at")
  user            User        @relation(fields: [userId], references: [id])
  items           OrderItem[]
  payments        Payment[]

  @@map("orders")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int     @map("order_id")
  productId Int     @map("product_id")
  quantity  Int     @default(1)
  unitPrice Decimal @map("unit_price") @db.Decimal(10, 2)
  order     Order   @relation(fields: [orderId], references: [id])

  @@map("order_items")
}

model Payment {
  id        Int      @id @default(autoincrement())
  orderId   Int      @map("order_id")
  amount    Decimal  @map("amount") @db.Decimal(10, 2)
  currency  String   @default("USD")
  status    String   @default("pending")
  gatewayId String   @map("gateway_id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  order     Order    @relation(fields: [orderId], references: [id])

  @@map("payments")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String   @default("order_confirmation")
  content   String   @db.VarChar(255)
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")
  user      User     @relation(fields: [userId], references: [id])

  @@map("notifications")
}
